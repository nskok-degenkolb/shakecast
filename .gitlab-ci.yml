image: docker:19.03.13

include:
  - project: 'ghsc/hazdev/pipeline-build-template'
    ref: 'master'
    file: 'templates/library.yml'

variables:
  DOCKER_DRIVER: overlay2
  GIT_STRATEGY: clone
  IMAGE_NAME: "${CI_PROJECT_NAME}:${CI_PIPELINE_ID}"
  #TWINE_USERNAME: ${PYPI_USERNAME}
  #TWINE_PASSWORD: ${PYPI_PASSWORD}

stages:
  - build
  - test
  - release
  - staging
  - deploy
  - publish

.shakecast-dev:
  tags:
    - shakecast-dev

.compose:
  image: docker/compose:latest
  extends:
    - .dind
    - .shakecast-dev
  variables:
    SHAKECAST_USER_ID: ${UID}
  only:
    - merge_requests
  before_script:
    - docker build --build-arg "FROM_IMAGE=${DEVOPS_REGISTRY}usgs/obspy:3.8" . -t usgs/shakecast:latest

.release:
  before_script:
    - echo ${CI_COMMIT_REF_NAME} > shakecast/version

.python:
  image:
    name: ${CODE_REGISTRY_IMAGE}/shakecast:${CI_PIPELINE_ID}
    entrypoint: [""]

.python-test:
  extends:
    - .python
  only:
    - merge_requests
  before_script:
    - cd ${CI_PROJECT_DIR}
    - source ./environments/python-test.sh
    - ./scripts/python-test-setup.sh

.build:
  tags:
    - build
  except:
    - schedules

# BUILD STEPS
build-test-images:
  stage: build
  extends: 
    - .shakecast-dev
    - .dind
    - .build
  only:
    - merge_requests
  script:
    - docker build --build-arg "FROM_IMAGE=${DEVOPS_REGISTRY}usgs/obspy:3.8" . -t ${CODE_REGISTRY_IMAGE}/shakecast:${CI_PIPELINE_ID}
    - docker push ${CODE_REGISTRY_IMAGE}/shakecast:${CI_PIPELINE_ID}
  after_script:
    - docker rmi ${CODE_REGISTRY_IMAGE}/shakecast:${CI_PIPELINE_ID}

# TESTING THE PYTHON APP
app-test:
  stage: test
  extends: 
    - .shakecast-dev
    - .python-test
  script:
    - python3 -m shakecast.tests.bundle

api-test:
  stage: test
  extends: 
    - .shakecast-dev
    - .python-test
  script:
    - python3 -m shakecast.api &
    - sleep 5
    - curl localhost:5000

compose-test:
  stage: test
  extends:
    - .shakecast-dev
    - .compose
  script:
    - sed -i 's/80:5000/5000/g' docker-compose.yml
    - echo Running with user ID ${SHAKECAST_USER_ID}
    - docker-compose up -d
    - sleep 5
  #  - docker-compose run web-server_1 curl localhost:5000
  after_script:
    - docker-compose down

# RELEASE IMAGES
release-dev:
  stage: release
  extends:
    - .dind
    - .release
    - .build
  only:
    - master
  script:
    - docker build --build-arg "FROM_IMAGE=${DEVOPS_REGISTRY}usgs/obspy:3.8" . -t ${CODE_REGISTRY_IMAGE}/shakecast:dev
    - docker push ${CODE_REGISTRY_IMAGE}/shakecast:dev
    - docker tag ${CODE_REGISTRY_IMAGE}/shakecast:dev usgs/shakecast:dev
    - docker push usgs/shakecast:dev
  after_script:
    - docker rmi usgs/shakecast:dev

release-prod:
  stage: release
  extends:
    - .dind
    - .release
    - .build
  only:
    - tags
  script:
    - docker build --build-arg "FROM_IMAGE=${DEVOPS_REGISTRY}usgs/obspy:3.8" . -t ${CODE_REGISTRY_IMAGE}/shakecast:latest
    - docker push ${CODE_REGISTRY_IMAGE}/shakecast:latest
    - docker tag ${CODE_REGISTRY_IMAGE}/shakecast:latest usgs/shakecast:latest
    - docker push usgs/shakecast:latest
  after_script:
    - docker rmi usgs/shakecast:latest

# STAGING
test-staging:
  stage: staging
  only:
    - master
  when: manual
  extends: 
    - .shakecast-dev
    - .dind
  before_script:
    - docker rm -f shakecast-test || true
    - docker rmi ${CODE_REGISTRY_IMAGE}/shakecast:dev || true
  script:
    - docker run -d --name=shakecast-test --network=app-network --entrypoint=python ${CODE_REGISTRY_IMAGE}/shakecast:dev -m shakecast start

prod-staging:
  stage: staging
  only:
    - tags
  when: manual
  extends: 
    - .shakecast-dev
    - .dind
  before_script:
    - docker rm -f shakecast-prod || true
    - docker rmi ${CODE_REGISTRY_IMAGE}/shakecast:latest || true
  script:
    - docker run -d --name=shakecast-prod --network=app-network --entrypoint=python ${CODE_REGISTRY_IMAGE}/shakecast:latest -m shakecast start

# PUBLISH PACKAGES/CONTAINERS
publish-python:
  stage: publish
  image:
    name: ${CODE_REGISTRY_IMAGE}/shakecast:latest
    entrypoint: [""]
  extends:
    - .release
  only:
    - tags
  when: manual
  script:
    - python3 -m pip install --upgrade pip
    - python3 -m pip install setuptools wheel twine
    - python3 setup.py bdist_wheel
    - TWINE_PASSWORD=${TWINE_PASSWORD} TWINE_USERNAME=${TWINE_USERNAME} python3 -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*

job:on-schedule:
  stage: build
  extends: 
    - .shakecast-dev
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - when: manual
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#    - docker build --build-arg "FROM_IMAGE=${DEVOPS_REGISTRY}usgs/obspy:3.8" . -t ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:daily
    - docker build --build-arg "FROM_IMAGE=${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:python3.11" . -t ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:daily
    - docker push ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:daily
  after_script:
    - docker rmi ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:daily
